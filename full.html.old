<!DOCTYPE html>
<html>
<head>
<title>Projekt</title>
<meta charset='utf-8' />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
</head>
<body>
<style>
#ctx{
	border: 1px solid #000;
	background: url('testmap.png');
	background-size: cover;
	background-position: -25px -25px;
	cursor: none;
}
</style>
<canvas id="ctx" width="1450" height="1450" style="border:1px solid #000000;"></canvas>

<script>
var ctx = document.getElementById("ctx").getContext("2d"); 
ctx.font = '30px Arial';

var HEIGHT = document.getElementById("ctx").clientHeight;
var WIDTH = document.getElementById("ctx").clientWidth;
var map =  [
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , ,2, , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , ,2, , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , ,2, , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2, , , , , , , , , , , , , , , , , , , , , , , , , , , , ,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
];

var timeWhenGameStarted = Date.now();	//return time in ms

drawMap = function(){
	var tilesize = 50;
	var xx = 0;
	var yy = 0;
	var width = tilesize;
	var height = tilesize;
	for (var j = 0; j < map.length; j++){
		var id = j;
		
		if(map[j] == null){
			var color = 'transparent';
		}
		if(map[j] == 2){
			var color = wallColor;
		}
		Tiles(id, xx, yy, width, height, color);
		xx += tilesize;
		if(xx == WIDTH){
			xx = 0;
			yy += tilesize;
		}
	}
	for(var key in tilesList){

		drawEntity(tilesList[key]);
		
		WallColl(player, tilesList[key]);
		for(var key2 in enemyList){
			WallColl(enemyList[key2], tilesList[key]);
		}
		for(var key3 in bulletList){
			var isColliding = testCollisionEntity(bulletList[key3],tilesList[key]);
			if(isColliding && tilesList[key].color === wallColor){
				delete bulletList[key3];
				break;
			}	
		}
		delete tilesList[key];
	}
};

var hero = new Image();
var ghost = new Image();
var upgrade = new Image();
var range = new Image();
range.src = "range.png";
upgrade.src = "upgr.png";
hero.src = "player.png";
ghost.src = "ghost.png";

var frameCount = 0;

var souls = 0;

var player = {
	x:50,
	spdX:30,
	y:40,
	spdY:5,
	souls:0,
	hp:10,
	width:40,
	height:40,
	frameid: 0,
	frames: 4,
	color:'green',
	img: hero,
	//
	atkSpd:1,
	attackCounter:0,
	atkRSpd:1,
	attackRCounter:0,
	standingStill:true,
	pressingDown:false,
	pressingUp:false,
	pressingLeft:false,
	pressingRight:false,
};
var aim = {
	x:player.x,
	y:player.y,
	width:20,
	height:20,
	color:'blue',
};

var wallColor = "rgba(0, 0, 0, 0.3)";
Tiles = function(id, xx, yy, width, height, color){
	var tile = {
		id:id,
		x:xx,
		y:yy,
		width:width,
		height:height,
		color:color
	};
	tilesList[id] = tile;
}

var enemyList = {};
var upgradeList = {};
var bulletList = {};
var ebulletList = {};

var tilesList = {};

getDistanceBetweenEntity = function (entity1,entity2){	//return distance (number)
	var vx = entity1.x - entity2.x;
	var vy = entity1.y - entity2.y;
	return Math.sqrt(vx*vx+vy*vy);
}

testCollisionBorder = function (entity,entitiyWB){
	var rect1 = {
		x:entity.x-entity.width/2,
		y:entity.y-entity.height/2,
		width:entity.width,
		height:entity.height,
	}
	var rect2 = {
		x:entitiyWB.x-entitiyWB.aoeW/2,
		y:entitiyWB.y-entitiyWB.aoeH/2,
		width:entitiyWB.aoeW,
		height:entitiyWB.aoeH,
	}
	return testCollisionRectRect(rect1,rect2);
}
testCollisionEntity = function (entity1,entity2){	//return if colliding (true/false)
	var rect1 = {
		x:entity1.x-entity1.width/2,
		y:entity1.y-entity1.height/2,
		width:entity1.width,
		height:entity1.height,
	}
	var rect2 = {
		x:entity2.x-entity2.width/2,
		y:entity2.y-entity2.height/2,
		width:entity2.width,
		height:entity2.height,
	}
	return testCollisionRectRect(rect1,rect2);
}

testCollisionRectRect = function(rect1,rect2){
	return rect1.x <= rect2.x+rect2.width 
		&& rect2.x <= rect1.x+rect1.width
		&& rect1.y <= rect2.y + rect2.height
		&& rect2.y <= rect1.y + rect1.height;
}

Enemy = function (id,x,y,spdX,spdY,width,height,color,hp, img,frameid, frames, type){
	var enemy = {
		x:x,
		spdX:spdX,
		y:y,
		spdY:spdY,
		id:id,
		width:width,
		height:height,
		img: img,
		color:color,
		hp:hp,
		frameid: frameid,
		frames:frames,
		aoeW: width*10,
		aoeH: height*10,
		type: type
	};
	enemyList[id] = enemy;
	
}
randomlyGenerateEnemy = function(ex,ey){
	var x = ex;
	var y = ey;
	var height = 40;//НАСТРОИТЬ
	var width = 40;//НАСТРОИТЬ
	var id = Math.random();
	var spdX = 0;
	var spdY = 0;
	var hp = Math.floor(Math.random() * Math.floor(4)) + 1;
	var frameid = 0;
	var frames = 4;
	if(id < 0.1){
		var color = "cyan";
		var type = "range";
		var img = range;
	}else{
		var img = ghost;
		var color = "red";
		var type = "melee";
	};
	Enemy(id,x,y,spdX,spdY,width,height,color,hp, img,frameid, frames, type);
	
}

Upgrade = function (id,x,y,spdX,spdY,width,height,img,category,color){
	var asd = {
		x:x,
		spdX:spdX,
		y:y,
		spdY:spdY,
		id:id,
		width:width,
		height:height,
		color:color,
		img:img,
		//
		category:category,
	};
	upgradeList[id] = asd;
}

randomlyGenerateUpgrade = function(){
	var x = Math.random()*WIDTH;
	var y = Math.random()*HEIGHT;
	var height = 20;
	var width = 20;
	var id = Math.random();
	var spdX = 0;
	var spdY = 0;
	var img = upgrade;
	if(Math.random()<0.5){
		var category = 'hp';
		var color = 'orange';
	} else {
		var category = 'atkSpd';
		var color = 'purple';
	}
	
	Upgrade(id,x,y,spdX,spdY,width,height,img,category,color);
}

Bullet = function (id,x,y,spdX,spdY,width,height, color){
	var asd = {
		x:x,
		spdX:spdX,
		y:y,
		spdY:spdY,
		id:id,
		width:width,
		height:height,
		color:color,
		//
		timer:0,
	};
	bulletList[id] = asd;
}

randomlyGenerateBullet = function(){
	var x = player.x;
	var y = player.y;
	var ax = aim.x;
	var ay = aim.y;
	var t = Math.sqrt(Math.pow((ax - x),2)+Math.pow((ay - y),2)) / 30;
	var height = 10;//НАСТРОИТЬ
	var width = 10;//НАСТРОИТЬ
	var id = Math.random();
	var color = "black";
	var angle = Math.random()*360;
	var spdX = (ax - x) / t;
	var spdY = (ay - y) / t;
	Bullet(id,x,y,spdX,spdY,width,height);
}
randomlyGenerateMelee = function(){
	var x = player.x;
	var y = player.y;
	var ax = aim.x;
	var ay = aim.y;
	var t = Math.sqrt(Math.pow((ax - x),2)+Math.pow((ay - y),2)) / 20;
	var height = 40;
	var width = 40;
	var id = Math.random();
	var color = "yellow";
	var angle = Math.random()*360;
	var spdX = (ax - x) / t;
	var spdY = (ay - y) / t;
	Bullet(id,x,y,spdX,spdY,width,height);
}

EBullet = function (id,x,y,spdX,spdY,width,height){
	var asd = {
		x:x,
		spdX:spdX,
		y:y,
		spdY:spdY,
		id:id,
		width:width,
		height:height,
		color:'purple',
		//
		timer:0,
	};
	ebulletList[id] = asd;
	console.log("wooo3");
}

randomlyGenerateEBullet = function(spawnx, spawny, targetx, targety){
	var x = spawnx;
	var y = spawny;
	var ax = targetx;
	var ay = targety;
	var t = Math.sqrt(Math.pow((ax - x),2)+Math.pow((ay - y),2)) / 20;
	var height = 10;
	var width = 10;
	var id = Math.random();
	
	var angle = Math.random()*360;
	var spdX = (ax - x) / t;
	var spdY = (ay - y) / t;
	EBullet(id,x,y,spdX,spdY,width,height);
	console.log(spawnx+" "+spawny+" "+targetx+" "+targety);
}
useRange = function(something1, something2){
	if(player.attackCounter > 25){	//every 1 sec
		randomlyGenerateEBullet(Math.floor(something1.x),Math.floor(something1.y),something2.x,something2.y);
		player.attackCounter = 0;
	}
}

updateEntity = function (something){
	updateEntityPosition(something);
	if(something.color == "red"){
		drawEntity(something, 0);
	}
	else{
		drawEntity(something);
	}
}

updateEntityPosition = function(something){
	something.x += something.spdX;
	something.y += something.spdY;
			
	if(something.x < 0 || something.x > WIDTH){
	}
	if(something.y < 0 || something.y > HEIGHT){
	}
}
AnimateEntity = function(something){
	ctx.drawImage(
	something.img,
	something.frameid * something.width,
	0,
	something.width,
	something.height,
	something.x-something.width/2,
	something.y-something.height/2,
	something.width,
	something.height,
	);
}
AnimatePlayer = function(something, direction){
	ctx.drawImage(
	something.img,
	something.frameid * something.width,
	direction,
	something.width,
	something.height,
	something.x-something.width/2,
	something.y-something.height/2,
	something.width,
	something.height,
	);
}
drawEntity = function(something, direction){
	ctx.save();
	if(something.img == hero){
		AnimatePlayer(something, direction);
	}
	else if(something.color == "red"){
		if (something.frameid < something.frames - 1) {
			something.frameid += 1;
		} else {
			something.frameid = 0;
		}
		AnimateEntity(something);
	}
	else if(something.color == "cyan"){
		if (something.frameid < something.frames - 1) {
			something.frameid += 1;
		} else {
			something.frameid = 0;
		}
		AnimateEntity(something);
	}
	else if(something.category){
		var category;
		if(something.category == "hp")
			category = 0;
		if(something.category == "atkSpd")
			category = 20;
		ctx.drawImage(
			something.img,
			category,
			0,
			something.width,
			something.height,
			something.x-something.width/2,
			something.y-something.height/2,
			something.width,
			something.height,
		);
	}
	else if(something.color == wallColor){
		ctx.fillStyle = something.color;
		ctx.fillRect(something.x-something.width/2,something.y-something.height/2,something.width,something.height);
	}
	else{
		ctx.fillStyle = something.color;
		ctx.fillRect(something.x-something.width/2,something.y-something.height/2,something.width,something.height);
	}
	ctx.restore();
}
drawBorder = function(something){
	ctx.save();
	ctx.rect(something.x-something.width*2,something.y-something.height*2,something.aoeW,something.aoeH);
	ctx.restore();
}
var WallColl = function(someone, wall){
	var isColliding = testCollisionEntity(someone, wall);
	if(isColliding && wall.color === wallColor){
		if(someone.x < wall.x){
			someone.x = someone.x - 10;
		}
		if(someone.x > wall.x){
			someone.x = someone.x + 10;
		}
		if(someone.y > wall.y){
			someone.y = someone.y + 10;
		}
		if(someone.y < wall.y){
			someone.y = someone.y - 10;
		}
	}
	//SPAWN CHECK
	if(someone.color == "red"){
		if(someone.x < wall.x){
			delete someone;
		}
		if(someone.x > wall.x){
			delete someone;
		}
		if(someone.y > wall.y){
			delete someone;
		}
		if(someone.y < wall.y){
			delete someone;
		}
	}
}
moveTo = function(something1, something2){
	var x = something1.x;
	var y = something1.y;
	var ax = something2.x;
	var ay = something2.y;
	var t = Math.sqrt(Math.pow((ax - x),2)+Math.pow((ay - y),2)) / 10;
	
	something1.spdX = (ax - x) / t;
	something1.spdY = (ay - y) / t;
}

HALT = function(someone){
	someone.spdX = 0;
	someone.spdY = 0;
}

//MAIN ATTACK (BOW)
document.onclick = function(mouse){
	if(player.attackCounter > 25){ //НАСТРОИТЬ
		randomlyGenerateBullet();
		player.attackCounter = 0;
	}
}
//ATTERNATIVE ATTACK (SWORD)
document.oncontextmenu = function(mouse){
	if(player.attackRCounter > 10){ //НАСТРОИТЬ
		randomlyGenerateMelee();
		player.attackRCounter = 0;
	}
	return false;
}

document.onmousemove = function(mouse){
	var mouseX = mouse.clientX - document.getElementById('ctx').getBoundingClientRect().left;
	var mouseY = mouse.clientY - document.getElementById('ctx').getBoundingClientRect().top;
	aim.x = mouseX;
	aim.y = mouseY;
}

document.onkeydown = function(event){
	player.standingStill = false;
	if(event.keyCode === 68)	//d
		player.pressingRight = true;
	else if(event.keyCode === 83)	//s
		player.pressingDown = true;
	else if(event.keyCode === 65) //a
		player.pressingLeft = true;
	else if(event.keyCode === 87) // w
		player.pressingUp = true;
}

document.onkeyup = function(event){
	if(event.keyCode === 68)	//d
		player.pressingRight = false;
	else if(event.keyCode === 83)	//s
		player.pressingDown = false;
	else if(event.keyCode === 65) //a
		player.pressingLeft = false;
	else if(event.keyCode === 87) // w
		player.pressingUp = false;
	player.standingStill = true;
	player.frameid = 0;
}
RIGHT = function(smth){
	smth.x += 10;
	drawEntity(smth, 0);
}
LEFT = function(smth){
	smth.x -= 10;	
	drawEntity(smth, 40);
}
DOWN = function(smth){
	smth.y += 10;	
	drawEntity(smth, 80);
}
UP = function(smth){
	smth.y -= 10;	
	drawEntity(smth, 120);
}
updatePlayerPosition = function(){
	
	if (player.frameid < player.frames - 1) {
		player.frameid += 1;
	} else {
		player.frameid = 0;
	}
	if(player.pressingRight)
		RIGHT(player);
	if(player.pressingLeft)
		LEFT(player);
	if(player.pressingDown)
		DOWN(player);
	if(player.pressingUp)
		UP(player);
	if(player.standingStill)
		drawEntity(player, 160);
	
	//ispositionvalid
	if(player.x < player.width/2)
		player.x = player.width/2;
	if(player.x > WIDTH-player.width/2)
		player.x = WIDTH - player.width/2;
	if(player.y < player.height/2)
		player.y = player.height/2;
	if(player.y > HEIGHT - player.height/2)
		player.y = HEIGHT - player.height/2;
	
}

update = function(){
	ctx.clearRect(0,0,WIDTH,HEIGHT);
	
	drawMap();
	
	frameCount++;
	time++;
	if(time == 10){
		for(i = 0; i < 10; i++){
			randomlyGenerateEnemy(500, 500); //Math.random()*WIDTH, Math.random()*HEIGHT
			randomlyGenerateUpgrade();
		}
	}
	//if(frameCount % 100 === 0)	//every 4 sec
	//	randomlyGenerateEnemy();

	//if(frameCount % 75 === 0)	//every 3 sec
	//	randomlyGenerateUpgrade();
	
	player.attackCounter += player.atkSpd;
	player.attackRCounter += player.atkRSpd;
	
	
	for(var key in bulletList){
		updateEntity(bulletList[key]);
		
		var toRemove = false;
		bulletList[key].timer++;
		if(bulletList[key].height < 15 && bulletList[key].timer > 65){ //DESTRUCTION TIME
			toRemove = true; //RANGE
		}
		else if(bulletList[key].height > 10 && bulletList[key].timer > 1){ //DESTRUCTION TIME
			toRemove = true; //MELEE
		}
		
		for(var key2 in enemyList){
			var isColliding = testCollisionEntity(bulletList[key],enemyList[key2]);
			if(isColliding){
				toRemove = true;
				if(enemyList[key2].hp <= 0){
					delete enemyList[key2];
					player.souls++;
				}else if(bulletList[key].height < 15){
					enemyList[key2].hp--;
				}else if(bulletList[key].height > 10){
					enemyList[key2].hp-=4;
				}
				break;
			}			
		}
		if(toRemove){
			delete bulletList[key];
		}
	}

	for(var key in ebulletList){
		updateEntity(ebulletList[key]);
		
		var toRemove = false;
		ebulletList[key].timer++;
		if(ebulletList[key].timer > 75){
			toRemove = true;
		}
		var damagePlayer = testCollisionEntity(ebulletList[key],player);
		if(damagePlayer){
			toRemove = true;
			player.hp--;
			break;
		}
		if(toRemove){
			delete ebulletList[key];
		}
	}
	
	for(var key in upgradeList){
		updateEntity(upgradeList[key]);
		var isColliding = testCollisionEntity(player,upgradeList[key]);
		if(isColliding){
			if(upgradeList[key].category === 'hp')
				player.hp += 1;
			if(upgradeList[key].category === 'atkSpd')
				player.atkSpd += 3;
			delete upgradeList[key];
		}
	}
	
	for(var key in enemyList){
		updateEntity(enemyList[key]);
		drawBorder(enemyList[key]);
		var BorderCollide = testCollisionBorder(player,enemyList[key]);
		if(BorderCollide && enemyList[key].type == "melee"){
			moveTo(enemyList[key], player);
		}
		else if(BorderCollide && enemyList[key].type == "range"){
			moveTo(enemyList[key], player);
			useRange(enemyList[key], player);
		}
		else{
			HALT(enemyList[key]);
		}
		var isColliding = testCollisionEntity(player,enemyList[key]);
		if(isColliding){
			player.hp = player.hp;
		}
	}
	if(player.hp <= 0){
		var timeSurvived = Date.now() - timeWhenGameStarted;		
		console.log("You lost! You survived for " + timeSurvived + " ms.");		
		startNewGame();
	}
	updatePlayerPosition();
	
	drawEntity(aim);
	ctx.fillText(player.hp + " Hp",0,30);
	ctx.fillText(player.souls + " Souls",0,60);
	ctx.fillText('Day Time: ' + time,200,30);
}

startNewGame = function(){
	player.hp = 10;
	timeWhenGameStarted = Date.now();
	frameCount = 0;
	time = 0;
	enemyList = {};
	upgradeList = {};
	bulletList = {};

	tilesList = {};
}

startNewGame();

setInterval(update,60); //НАСТРОИТЬ 40
</script>
</body>
</html>